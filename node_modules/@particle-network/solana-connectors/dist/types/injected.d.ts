import { type SolanaProvider } from '@particle-network/connector-core';
import { PublicKey } from '@solana/web3.js';
type Target = {
    icon?: string;
    id: string;
    name: string;
    provider: (window?: Window | undefined) => SolanaProvider | undefined;
};
type TargetId = 'coinbaseWallet' | 'bitKeep' | 'trustWallet' | 'okxWallet' | 'phantom' | 'braveWallet';
export type InjectedParameters = {
    unstableShimAsyncInject?: boolean | number | undefined;
    target: TargetId | Target | (() => Target);
};
type Window = {
    coinbaseSolana?: any | undefined;
    bitkeep?: any | undefined;
    phantom?: any | undefined;
    trustwallet?: any | undefined;
    okxwallet?: any | undefined;
    braveSolana?: any | undefined;
};
export declare function injected(parameters: InjectedParameters): import("@particle-network/connector-core").CreateConnectorFn<SolanaProvider | undefined, {
    publicKey?: PublicKey | undefined;
    onAccountChanged(publicKey: PublicKey): void;
}, {
    [x: `${string}.injected.connected`]: true;
    [x: `${string}.injected.chainId`]: number;
}>;
export declare namespace injected {
    var type: "injected";
}
export {};
