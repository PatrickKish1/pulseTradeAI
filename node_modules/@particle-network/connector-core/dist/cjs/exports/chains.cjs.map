{
  "version": 3,
  "sources": ["../../../src/exports/chains.ts", "../../../src/chains/defineSolana.ts", "../../../src/chains/utils.ts"],
  "sourcesContent": ["export { defineChain } from 'viem';\n\n// all viem chains\nexport * from 'viem/chains';\n\nexport * from '../chains/defineSolana';\n\nexport * from '../chains';\n", "import { defineChain } from 'viem';\n\nexport const solana = defineChain({\n  id: 101,\n  name: 'Solana',\n  nativeCurrency: {\n    decimals: 9,\n    name: 'Solana SOL',\n    symbol: 'SOL',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://api.mainnet-beta.solana.com'],\n    },\n  },\n  blockExplorers: {\n    default: { name: 'Explorer', url: 'https://solscan.io' },\n  },\n  custom: {\n    chainType: 'solana',\n  },\n});\n\nexport const solanaTestnet = defineChain({\n  id: 102,\n  name: 'Solana Testnet',\n  nativeCurrency: {\n    decimals: 9,\n    name: 'Testnet SOL',\n    symbol: 'SOL',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://api.testnet.solana.com'],\n    },\n  },\n  blockExplorers: {\n    default: { name: 'Explorer', url: 'https://solscan.io' },\n  },\n  testnet: true,\n  custom: {\n    chainType: 'solana',\n  },\n});\n\nexport const solanaDevnet = defineChain({\n  id: 103,\n  name: 'Solana Devnet',\n  nativeCurrency: {\n    decimals: 9,\n    name: 'Devnet SOL',\n    symbol: 'SOL',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://api.devnet.solana.com'],\n    },\n  },\n  blockExplorers: {\n    default: { name: 'Explorer', url: 'https://solscan.io' },\n  },\n  testnet: true,\n  custom: {\n    chainType: 'solana',\n  },\n});\n", "import type { Chain } from 'viem/chains';\nimport * as chains from 'viem/chains';\nimport * as solanaChains from './defineSolana';\n\nexport const isSolanaChain = (chain: Chain | number) => {\n  const id = typeof chain === 'number' ? chain : chain.id;\n  return id === 101 || id === 102 || id === 103;\n};\n\nexport const isEVMChain = (chain: Chain | number) => {\n  return !isSolanaChain(chain);\n};\n\nexport const getChainType = (chain: Chain | number) => {\n  return isEVMChain(chain) ? 'evm' : 'solana';\n};\n\nexport const getChain = (chainId: number): Chain => {\n  for (const chain of Object.values(solanaChains)) {\n    if ('id' in chain) {\n      if (chain.id === chainId) {\n        return chain;\n      }\n    }\n  }\n  for (const chain of Object.values(chains)) {\n    if ('id' in chain) {\n      if (chain.id === chainId) {\n        return chain;\n      }\n    }\n  }\n\n  throw new Error(`Chain with id ${chainId} not found`);\n};\n\nexport const getChainIcon = (chain: number | Chain) => {\n  if (typeof chain !== 'number' && typeof chain.custom?.icon === 'string') {\n    return chain.custom?.icon;\n  }\n\n  const chainId = typeof chain === 'number' ? chain : chain.id;\n  // \u6839\u636Eid\u83B7\u53D6icon\n\n  if (isSolanaChain(chainId)) {\n    return `https://static.particle.network/chains/solana/icons/${chainId}.png`;\n  }\n\n  return `https://static.particle.network/chains/evm/icons/${chainId}.png`;\n};\n\nexport const defaultChainIcon = 'https://static.particle.network/chains/unknown-logo.png';\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,eAA4B;AAG5B,2BAAc,wBAHd;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA4B;AAErB,IAAM,aAAS,yBAAY;AAAA,EAChC,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,gBAAgB;AAAA,IACd,UAAU;AAAA,IACV,MAAM;AAAA,IACN,QAAQ;AAAA,EACV;AAAA,EACA,SAAS;AAAA,IACP,SAAS;AAAA,MACP,MAAM,CAAC,qCAAqC;AAAA,IAC9C;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,SAAS,EAAE,MAAM,YAAY,KAAK,qBAAqB;AAAA,EACzD;AAAA,EACA,QAAQ;AAAA,IACN,WAAW;AAAA,EACb;AACF,CAAC;AAEM,IAAM,oBAAgB,yBAAY;AAAA,EACvC,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,gBAAgB;AAAA,IACd,UAAU;AAAA,IACV,MAAM;AAAA,IACN,QAAQ;AAAA,EACV;AAAA,EACA,SAAS;AAAA,IACP,SAAS;AAAA,MACP,MAAM,CAAC,gCAAgC;AAAA,IACzC;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,SAAS,EAAE,MAAM,YAAY,KAAK,qBAAqB;AAAA,EACzD;AAAA,EACA,SAAS;AAAA,EACT,QAAQ;AAAA,IACN,WAAW;AAAA,EACb;AACF,CAAC;AAEM,IAAM,mBAAe,yBAAY;AAAA,EACtC,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,gBAAgB;AAAA,IACd,UAAU;AAAA,IACV,MAAM;AAAA,IACN,QAAQ;AAAA,EACV;AAAA,EACA,SAAS;AAAA,IACP,SAAS;AAAA,MACP,MAAM,CAAC,+BAA+B;AAAA,IACxC;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,SAAS,EAAE,MAAM,YAAY,KAAK,qBAAqB;AAAA,EACzD;AAAA,EACA,SAAS;AAAA,EACT,QAAQ;AAAA,IACN,WAAW;AAAA,EACb;AACF,CAAC;;;AChED,aAAwB;AAGjB,IAAM,gBAAgB,CAAC,UAA0B;AACtD,QAAM,KAAK,OAAO,UAAU,WAAW,QAAQ,MAAM;AACrD,SAAO,OAAO,OAAO,OAAO,OAAO,OAAO;AAC5C;AAEO,IAAM,aAAa,CAAC,UAA0B;AACnD,SAAO,CAAC,cAAc,KAAK;AAC7B;AAEO,IAAM,eAAe,CAAC,UAA0B;AACrD,SAAO,WAAW,KAAK,IAAI,QAAQ;AACrC;AAEO,IAAM,WAAW,CAAC,YAA2B;AAClD,aAAW,SAAS,OAAO,OAAO,oBAAY,GAAG;AAC/C,QAAI,QAAQ,OAAO;AACjB,UAAI,MAAM,OAAO,SAAS;AACxB,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACA,aAAW,SAAS,OAAO,OAAO,MAAM,GAAG;AACzC,QAAI,QAAQ,OAAO;AACjB,UAAI,MAAM,OAAO,SAAS;AACxB,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAEA,QAAM,IAAI,MAAM,iBAAiB,mBAAmB;AACtD;AAEO,IAAM,eAAe,CAAC,UAA0B;AACrD,MAAI,OAAO,UAAU,YAAY,OAAO,MAAM,QAAQ,SAAS,UAAU;AACvE,WAAO,MAAM,QAAQ;AAAA,EACvB;AAEA,QAAM,UAAU,OAAO,UAAU,WAAW,QAAQ,MAAM;AAG1D,MAAI,cAAc,OAAO,GAAG;AAC1B,WAAO,uDAAuD;AAAA,EAChE;AAEA,SAAO,oDAAoD;AAC7D;AAEO,IAAM,mBAAmB;",
  "names": ["import_viem"]
}
