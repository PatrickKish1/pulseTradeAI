import type { WalletConnector, WalletConnectorType } from '@particle-network/connector-core';
import type { AuthWalletConnectorProperties, EVMWalletConnectorProperties } from '../types/properties';
export declare const useWalletConnectors: () => readonly {
    [x: string]: unknown;
    readonly type: WalletConnectorType;
    readonly chains: readonly [import("viem").Chain, ...import("viem").Chain[]];
    readonly connectors: import("@particle-network/connector-core").Connector[];
    store: import("zustand").StoreApi<import("@particle-network/connector-core").Connector[]>;
    _internal: {
        connectors: {
            setup: (connectorFn: import("@particle-network/connector-core").CreateConnectorFn<unknown, Record<string, unknown>, Record<string, unknown>>) => import("@particle-network/connector-core").Connector;
        };
    };
    getClient: <chainType extends import("@particle-network/connector-core").ChainType = "evm">(chainId: number) => import("@particle-network/connector-core").ClientType<chainType>;
}[];
export declare const useWalletConnector: <T extends WalletConnectorType>(walletConnectorType: T) => T extends 'particleAuth' ? WalletConnector<AuthWalletConnectorProperties> : T extends 'evmWallet' ? WalletConnector<EVMWalletConnectorProperties> : WalletConnector;
