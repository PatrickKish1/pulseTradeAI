type MutationStatus = 'idle' | 'loading' | 'success' | 'error';
export interface MutationOptions<TData, TVariables> {
    onMutate?: (variables: TVariables) => void;
    onSuccess?: (data: TData) => void;
    onError?: (error: any) => void;
    onSettled?: (data: TData | null, error: any) => void;
}
interface MutationResult<TData, TVariables> {
    status: MutationStatus;
    data: TData | null;
    error: any;
    mutate: (variables: TVariables) => void;
    mutateAsync: (variables: TVariables) => Promise<TData>;
}
export declare const useMutation: <TData = void, TVariables = void>(mutationFn: (variables: TVariables) => Promise<TData>, options?: MutationOptions<TData, TVariables>) => MutationResult<TData, TVariables>;
export {};
