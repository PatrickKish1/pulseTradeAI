import type { Connection, Evaluate } from '@particle-network/connector-core';
import type { Chain } from 'viem/chains';
export interface ProjectConfig {
    projectId: string;
    clientKey: string;
    appId: string;
}
export type CreatePluginFn<plugin = unknown, options = unknown, properties extends Record<string, unknown> = Record<string, unknown>> = (config: {
    projectConfig: ProjectConfig;
    chains: readonly [Chain, ...Chain[]];
    options?: Evaluate<options>;
}) => Evaluate<{
    readonly id: string;
    readonly name: string;
    setup?(): Promise<void>;
    getPlugin(): plugin;
    onConnect?(info: [Connection, ...Connection[]]): Promise<void>;
    onDisconnect?(): Promise<void>;
} & properties>;
export declare function createPlugin<plugin, config, properties extends Record<string, unknown> = Record<string, unknown>>(createPluginFn: CreatePluginFn<plugin, config, properties>): CreatePluginFn<plugin, config, properties>;
