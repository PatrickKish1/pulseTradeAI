"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/exports/chains.ts
var chains_exports = {};
__export(chains_exports, {
  defaultChainIcon: () => defaultChainIcon,
  defineChain: () => import_viem2.defineChain,
  getChain: () => getChain,
  getChainIcon: () => getChainIcon,
  getChainType: () => getChainType,
  isEVMChain: () => isEVMChain,
  isSolanaChain: () => isSolanaChain,
  solana: () => solana,
  solanaDevnet: () => solanaDevnet,
  solanaTestnet: () => solanaTestnet
});
module.exports = __toCommonJS(chains_exports);
var import_viem2 = require("viem");
__reExport(chains_exports, require("viem/chains"), module.exports);

// src/chains/defineSolana.ts
var defineSolana_exports = {};
__export(defineSolana_exports, {
  solana: () => solana,
  solanaDevnet: () => solanaDevnet,
  solanaTestnet: () => solanaTestnet
});
var import_viem = require("viem");
var solana = (0, import_viem.defineChain)({
  id: 101,
  name: "Solana",
  nativeCurrency: {
    decimals: 9,
    name: "Solana SOL",
    symbol: "SOL"
  },
  rpcUrls: {
    default: {
      http: ["https://api.mainnet-beta.solana.com"]
    }
  },
  blockExplorers: {
    default: { name: "Explorer", url: "https://solscan.io" }
  },
  custom: {
    chainType: "solana"
  }
});
var solanaTestnet = (0, import_viem.defineChain)({
  id: 102,
  name: "Solana Testnet",
  nativeCurrency: {
    decimals: 9,
    name: "Testnet SOL",
    symbol: "SOL"
  },
  rpcUrls: {
    default: {
      http: ["https://api.testnet.solana.com"]
    }
  },
  blockExplorers: {
    default: { name: "Explorer", url: "https://solscan.io" }
  },
  testnet: true,
  custom: {
    chainType: "solana"
  }
});
var solanaDevnet = (0, import_viem.defineChain)({
  id: 103,
  name: "Solana Devnet",
  nativeCurrency: {
    decimals: 9,
    name: "Devnet SOL",
    symbol: "SOL"
  },
  rpcUrls: {
    default: {
      http: ["https://api.devnet.solana.com"]
    }
  },
  blockExplorers: {
    default: { name: "Explorer", url: "https://solscan.io" }
  },
  testnet: true,
  custom: {
    chainType: "solana"
  }
});

// src/chains/utils.ts
var chains = __toESM(require("viem/chains"), 1);
var isSolanaChain = (chain) => {
  const id = typeof chain === "number" ? chain : chain.id;
  return id === 101 || id === 102 || id === 103;
};
var isEVMChain = (chain) => {
  return !isSolanaChain(chain);
};
var getChainType = (chain) => {
  return isEVMChain(chain) ? "evm" : "solana";
};
var getChain = (chainId) => {
  for (const chain of Object.values(defineSolana_exports)) {
    if ("id" in chain) {
      if (chain.id === chainId) {
        return chain;
      }
    }
  }
  for (const chain of Object.values(chains)) {
    if ("id" in chain) {
      if (chain.id === chainId) {
        return chain;
      }
    }
  }
  throw new Error(`Chain with id ${chainId} not found`);
};
var getChainIcon = (chain) => {
  if (typeof chain !== "number" && typeof chain.custom?.icon === "string") {
    return chain.custom?.icon;
  }
  const chainId = typeof chain === "number" ? chain : chain.id;
  if (isSolanaChain(chainId)) {
    return `https://static.particle.network/chains/solana/icons/${chainId}.png`;
  }
  return `https://static.particle.network/chains/evm/icons/${chainId}.png`;
};
var defaultChainIcon = "https://static.particle.network/chains/unknown-logo.png";
//# sourceMappingURL=chains.cjs.map
