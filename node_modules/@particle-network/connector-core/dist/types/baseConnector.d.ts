import type { ChainType } from './chains/types';
import type { ConnectorEventMap, CreateConnectorFn } from './createConnector';
import type { Emitter } from './createEmitter';
import type { Evaluate, ExactPartial } from './types/utils';
export type Connector = ReturnType<CreateConnectorFn> & {
    emitter: Emitter<ConnectorEventMap>;
    uid: string;
    chainType: ChainType;
    walletConnectorType: WalletConnectorType;
};
export type State = {
    chainId: number;
    connections: Map<string, Connection>;
    current: string | null;
    status: 'connected' | 'connecting' | 'disconnected' | 'reconnecting';
};
export type PartializedState = Evaluate<ExactPartial<Pick<State, 'chainId' | 'connections' | 'current' | 'status'>>>;
export type Connection = {
    accounts: readonly [string, ...string[]];
    chainId: number;
    connector: Connector;
};
export type WalletConnectorType = 'evmWallet' | 'solanaWallet' | 'particleAuth';
