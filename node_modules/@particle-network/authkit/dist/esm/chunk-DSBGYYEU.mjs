"use client";
import {
  useAuthCoreModal,
  useMessage_default,
  useTranslation
} from "./chunk-NTK434GA.mjs";

// src/context/hooks/useError.ts
import { ApiError } from "@particle-network/auth-core";
import { Modal } from "antd";
function formatServerError(error, t) {
  var _a;
  if (error && error.error_code) {
    let message = t == null ? void 0 : t(`error.server_${error.error_code}`);
    if (message && message.startsWith("error.server_")) {
      if ((error == null ? void 0 : error.extra) && Array.isArray(error == null ? void 0 : error.extra) && (error == null ? void 0 : error.extra.length)) {
        message = error == null ? void 0 : error.extra[0];
      } else {
        message = (_a = error == null ? void 0 : error.extra) != null ? _a : error.message;
      }
      message = message.charAt(0).toUpperCase() + message.slice(1);
      return message;
    }
    return message;
  } else {
    return error == null ? void 0 : error.message;
  }
}
var useError = () => {
  const { authCoreModal } = useAuthCoreModal();
  const { t } = useTranslation();
  const message = useMessage_default();
  function errorHandle(err) {
    var _a;
    console.log("errorHandle: " + JSON.stringify(err));
    const errorCode = (_a = err.error_code) != null ? _a : err.code;
    if (errorCode && typeof errorCode === "number") {
      if (errorCode === ApiError.InvalidCode || errorCode === ApiError.ResendCode || errorCode === ApiError.SecurityAccountFrozen || errorCode === ApiError.WrongPaymentPassword) {
      } else {
        const message2 = formatServerError(err, t);
        if (message2) {
          Modal.error({
            title: message2,
            wrapClassName: "auth-core-modal-error",
            getContainer: () => {
              return authCoreModal.rootBody;
            }
          });
        }
      }
    } else if (err.code === "ECONNABORTED") {
      if (err.message) {
        message.error(err.message);
      } else {
        message.error("Network Error");
      }
    } else {
      switch (err.status) {
        case 401:
        case 403:
        case 404:
        case 500:
          message.error("Http Error: " + err.status);
          break;
        default:
          if (err.message && typeof err.message === "string") {
            message.error(err.message);
          } else {
            console.error("http error", err);
          }
          break;
      }
    }
  }
  return { errorHandle };
};

export {
  useError
};
//# sourceMappingURL=chunk-DSBGYYEU.mjs.map
