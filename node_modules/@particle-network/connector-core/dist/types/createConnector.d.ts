import type { Connection } from '@solana/web3.js';
import type { Chain, PublicClient } from 'viem';
import type { StoreApi } from 'zustand/vanilla';
import type { Connector, WalletConnectorType } from './baseConnector';
import type { ChainType, EVMChain } from './chains/types';
import type { Emitter } from './createEmitter';
import type { Storage } from './createStorage';
import type { Evaluate, ExactPartial } from './types/utils';
export type AddEthereumChainParameter = {
    /** A 0x-prefixed hexadecimal string */
    chainId: string;
    /** The chain name. */
    chainName: string;
    /** Native currency for the chain. */
    nativeCurrency?: {
        name: string;
        symbol: string;
        decimals: number;
    } | undefined;
    rpcUrls: readonly string[];
    blockExplorerUrls?: string[] | undefined;
    iconUrls?: string[] | undefined;
};
export type ProviderConnectInfo = {
    chainId: string;
};
export type ProviderMessage = {
    type: string;
    data: unknown;
};
export type ConnectorEventMap = {
    change: {
        accounts?: readonly string[] | undefined;
        chainId?: number | undefined;
    };
    connect: {
        accounts: readonly string[];
        chainId: number;
    };
    disconnect: never;
    error: {
        error: Error;
    };
    message: {
        type: string;
        data?: unknown | undefined;
    };
};
export type CreateConnectorFn<provider = unknown, properties extends Record<string, unknown> = Record<string, unknown>, storageItem extends Record<string, unknown> = Record<string, unknown>> = (config: {
    chains: readonly [Chain, ...Chain[]];
    emitter: Emitter<ConnectorEventMap>;
    storage?: Evaluate<Storage<storageItem>> | null | undefined;
}) => Evaluate<{
    readonly icon?: string | undefined;
    readonly id: string;
    readonly name: string;
    readonly type: string;
    setup?(): Promise<void>;
    connect(parameters?: {
        chainId?: number | undefined;
        isReconnecting?: boolean | undefined;
    } | undefined): Promise<{
        accounts: readonly string[];
        chainId: number;
    }>;
    disconnect(): Promise<void>;
    getAccounts(): Promise<readonly string[]>;
    getChainId(): Promise<number>;
    getProvider(parameters?: {
        chainId?: number | undefined;
    } | undefined): Promise<provider>;
    isAuthorized(): Promise<boolean>;
    switchChain?(parameters: Evaluate<{
        addEthereumChainParameter?: ExactPartial<Omit<AddEthereumChainParameter, 'chainId'>> | undefined;
        chainId: number;
    }>): Promise<Chain>;
    onAccountsChanged?(accounts: string[]): void;
    onChainChanged(chainId: string): void;
    onConnect?(connectInfo: ProviderConnectInfo): void;
    onDisconnect(error?: Error | undefined): void;
    onMessage?(message: ProviderMessage): void;
    isInstalled?(): boolean;
} & properties>;
export type ClientType<chainType extends ChainType = EVMChain> = chainType extends EVMChain ? PublicClient : Connection;
export declare function createConnector<provider, properties extends Record<string, unknown> = Record<string, unknown>, storageItem extends Record<string, unknown> = Record<string, unknown>>(createConnectorFn: CreateConnectorFn<provider, properties, storageItem>): CreateConnectorFn<provider, properties, storageItem>;
export type WalletConnectorsOption = {
    chains: readonly [Chain, ...Chain[]];
    storage: Storage;
};
export type CreateWalletConnectorFn<option extends WalletConnectorsOption = WalletConnectorsOption, properties extends Record<string, unknown> = Record<string, unknown>> = (parameters: option) => Evaluate<{
    readonly type: WalletConnectorType;
    readonly chains: readonly [Chain, ...Chain[]];
    readonly connectors: Connector[];
    store: StoreApi<Connector[]>;
    _internal: {
        connectors: {
            setup: (connectorFn: CreateConnectorFn) => Connector;
        };
    };
    getClient<chainType extends ChainType = EVMChain>(chainId: number): ClientType<chainType>;
} & properties>;
export declare function createWalletConnector<option extends WalletConnectorsOption = WalletConnectorsOption, properties extends Record<string, unknown> = Record<string, unknown>>(createWalletConnectorFn: CreateWalletConnectorFn<option, properties>): CreateWalletConnectorFn<WalletConnectorsOption, Record<string, unknown>>;
export type WalletConnector<properties extends Record<string, unknown> = Record<string, unknown>> = ReturnType<CreateWalletConnectorFn<any, properties>>;
