{
  "version": 3,
  "sources": ["../../src/aaWrapProvider.ts", "../../src/smartAccount.ts", "../../src/utils.ts"],
  "sourcesContent": ["import EventEmitter from 'events';\nimport { SmartAccount } from './smartAccount';\nimport type { IEthereumProvider, JsonRpcRequest, ResolveTransactionParams } from './types';\n\nexport enum SendTransactionMode {\n    UserSelect = 0,\n    Gasless = 1,\n    UserPaidNative = 2,\n}\n\nexport enum SendTransactionEvent {\n    Request = 'RequestSendTransaction',\n    Resolve = 'ResolveSendTransaction',\n    Reject = 'RejectSendTransaction',\n}\n\nexport class AAWrapProvider implements IEthereumProvider {\n    private events = new EventEmitter();\n    constructor(\n        private smartAccount: SmartAccount,\n        private sendTxMode: SendTransactionMode = SendTransactionMode.UserPaidNative\n    ) {\n        this.events.setMaxListeners(100);\n\n        if (!Object.values(SendTransactionMode).includes(sendTxMode)) {\n            throw new Error(`sendTxMode value error, must in ${Object.values(SendTransactionMode)}`);\n        }\n    }\n\n    /**\n     * when receive SendTransactionEvent.Request event, call this method to continue sending the transaction.\n     *\n     * @see SendTransactionEvent\n     * @param params\n     */\n    resolveSendTransaction(params: ResolveTransactionParams) {\n        this.events.emit(SendTransactionEvent.Resolve, params);\n    }\n\n    /**\n     * when receive SendTransactionEvent.Request event, call this method to reject the transaction.\n     *\n     * @param error reject error message\n     */\n    rejectSendTransaction(error: Error) {\n        this.events.emit(SendTransactionEvent.Reject, error);\n    }\n\n    on(event: string, listener: any): this {\n        if (SendTransactionEvent.Request === event) {\n            this.events.on(event, listener);\n        } else {\n            this.smartAccount.provider.on(event, listener);\n        }\n        return this;\n    }\n\n    once(event: string, listener: any): this {\n        if (SendTransactionEvent.Request === event) {\n            this.events.once(event, listener);\n        } else {\n            if (this.smartAccount.provider.once) {\n                this.smartAccount.provider.once(event, listener);\n            } else {\n                this.smartAccount.provider.on(event, listener);\n            }\n        }\n        return this;\n    }\n\n    off(event: string, listener: any): this {\n        if (SendTransactionEvent.Request === event) {\n            this.events.off(event, listener);\n        } else {\n            if (this.smartAccount.provider.off) {\n                this.smartAccount.provider.off(event, listener);\n            } else {\n                this.smartAccount.provider.removeListener?.(event, listener);\n            }\n        }\n        return this;\n    }\n\n    removeListener(event: string, listener: any): this {\n        if (SendTransactionEvent.Request === event) {\n            this.events.removeListener(event, listener);\n        } else {\n            if (this.smartAccount.provider.removeListener) {\n                this.smartAccount.provider.removeListener(event, listener);\n            } else {\n                this.smartAccount.provider.off?.(event, listener);\n            }\n        }\n        return this;\n    }\n\n    enable(): Promise<string[]> {\n        return this.request({\n            method: 'eth_requestAccounts',\n        });\n    }\n\n    async request(payload: Partial<JsonRpcRequest>): Promise<any> {\n        if (payload.method === 'eth_requestAccounts' || payload.method === 'eth_accounts') {\n            await this.smartAccount.provider.request(payload);\n            const address = await this.smartAccount.getAddress();\n            return [address];\n        } else if (payload.method === 'eth_sendTransaction') {\n            if (!payload.params) {\n                return Promise.reject(new Error('send transaction param error'));\n            }\n            const txData = payload.params[0];\n\n            const feeQuotesResult = await this.smartAccount.getFeeQuotes(txData);\n            if (this.sendTxMode === SendTransactionMode.Gasless) {\n                const { userOp, userOpHash } =\n                    feeQuotesResult.verifyingPaymasterGasless || feeQuotesResult.verifyingPaymasterNative;\n                return this.smartAccount.sendUserOperation({ userOp, userOpHash });\n            } else if (this.sendTxMode === SendTransactionMode.UserPaidNative) {\n                const { userOp, userOpHash } = feeQuotesResult.verifyingPaymasterNative;\n                return this.smartAccount.sendUserOperation({ userOp, userOpHash });\n            }\n\n            return new Promise((resolve, reject) => {\n                this.events.removeAllListeners(SendTransactionEvent.Reject);\n                this.events.removeAllListeners(SendTransactionEvent.Resolve);\n                this.events.once(SendTransactionEvent.Resolve, async (params: ResolveTransactionParams) => {\n                    try {\n                        const sendParams = { ...params, tx: txData };\n                        const txHash = await this.smartAccount.sendTransaction(sendParams);\n                        resolve(txHash);\n                    } catch (error) {\n                        reject(error);\n                    }\n                });\n                this.events.once(SendTransactionEvent.Reject, reject);\n                if (!feeQuotesResult.transactions) {\n                    feeQuotesResult.transactions = [txData];\n                }\n                this.events.emit(SendTransactionEvent.Request, feeQuotesResult);\n            });\n        }\n\n        return this.smartAccount.provider.request(payload);\n    }\n}\n", "import axios from 'axios';\nimport { Hex, hashMessage } from 'viem';\nimport type {\n    Account,\n    AccountConfig,\n    AccountContract,\n    CreateSessionKeyOptions,\n    FeeQuotesResponse,\n    IEthereumProvider,\n    PasskeyProvider,\n    RequestArguments,\n    SendTransactionParams,\n    SessionKey,\n    SessionKeySignerParams,\n    SmartAccountConfig,\n    Transaction,\n    UserOp,\n    UserOpBundle,\n    UserOpParams,\n} from './types';\nimport { payloadId, rpcUrl } from './utils';\n\nconst loadAccountPromise = new Map<string, Promise<Account>>();\n\nexport class SmartAccount {\n    private connection;\n\n    private smartAccountContract: AccountContract;\n\n    constructor(public provider: IEthereumProvider & Partial<PasskeyProvider>, private config: SmartAccountConfig) {\n        if (!this.config.projectId || !this.config.clientKey || !this.config.appId) {\n            throw new Error('invalid project config');\n        }\n        if (!this.config.aaOptions.accountContracts) {\n            throw new Error('invalid AA contract config');\n        }\n        const name = Object.keys(this.config.aaOptions.accountContracts)[0];\n        const version = this.config.aaOptions.accountContracts[name]?.[0]?.version;\n        if (!name || !version) {\n            throw new Error('invalid AA name or version');\n        }\n        this.smartAccountContract = {\n            name,\n            version,\n        };\n\n        this.connection = axios.create({\n            baseURL: `${rpcUrl()}/evm-chain`,\n            timeout: 60_000,\n        });\n\n        this.connection.interceptors.request.use((config) => {\n            if (config?.data?.method) {\n                config.baseURL = `${config.baseURL}${config.baseURL?.includes('?') ? '&' : '?'}method=${\n                    config?.data?.method\n                }`;\n            }\n            return config;\n        });\n    }\n\n    setSmartAccountContract(contract: AccountContract) {\n        const accountContract = this.config.aaOptions.accountContracts[contract.name];\n        if (\n            !accountContract ||\n            accountContract.length === 0 ||\n            accountContract.every((item) => item.version !== contract.version)\n        ) {\n            throw new Error('Please configure the smart account contract first');\n        }\n        this.smartAccountContract = contract;\n    }\n\n    getChainId = async (): Promise<string> => {\n        return await this.provider.request({ method: 'eth_chainId' });\n    };\n\n    getOwner = async (): Promise<string> => {\n        const eoas = await this.provider.request({ method: 'eth_accounts' });\n        return eoas[0];\n    };\n\n    signUserOpHash = async (userOpHash: Hex): Promise<string> => {\n        let message = userOpHash;\n        if (this.provider.isPasskey && this.smartAccountContract.name !== 'COINBASE') {\n            message = hashMessage({\n                raw: userOpHash,\n            });\n        }\n        const eoa = await this.getOwner();\n        const signature = await this.provider.request({\n            method: 'personal_sign',\n            params: [message, eoa],\n        });\n        return signature;\n    };\n\n    private async getAccountConfig(): Promise<AccountConfig> {\n        const accountContract = this.config.aaOptions.accountContracts[this.smartAccountContract.name];\n        if (!accountContract || accountContract.every((item) => item.version !== this.smartAccountContract.version)) {\n            throw new Error('Please configure the smart account contract first');\n        }\n\n        const ownerAddress = await this.getOwner();\n        let passkeyOption;\n        if (this.provider.isPasskey) {\n            passkeyOption = await this.provider.getPasskeyOption?.();\n        }\n\n        return {\n            name: this.smartAccountContract.name,\n            version: this.smartAccountContract.version,\n            ownerAddress,\n            options: passkeyOption\n                ? {\n                      passkeyOption,\n                  }\n                : undefined,\n        };\n    }\n\n    async getFeeQuotes(tx: Transaction | Transaction[]): Promise<FeeQuotesResponse> {\n        const accountConfig = await this.getAccountConfig();\n        return this.sendRpc<FeeQuotesResponse>({\n            method: 'particle_aa_getFeeQuotes',\n            params: [accountConfig, Array.isArray(tx) ? tx : [tx]],\n        });\n    }\n\n    async buildUserOperation({ tx, feeQuote, tokenPaymasterAddress }: UserOpParams): Promise<UserOpBundle> {\n        const accountConfig = await this.getAccountConfig();\n        return await this.sendRpc<UserOpBundle>({\n            method: 'particle_aa_createUserOp',\n            params: [accountConfig, Array.isArray(tx) ? tx : [tx], feeQuote, tokenPaymasterAddress].filter(\n                (val) => !!val\n            ),\n        });\n    }\n\n    async signUserOperation({ userOpHash, userOp }: UserOpBundle): Promise<UserOp> {\n        const signature = await this.signUserOpHash(userOpHash as Hex);\n        return { ...userOp, signature };\n    }\n\n    async sendUserOperation({ userOpHash, userOp }: UserOpBundle): Promise<string> {\n        const signedUserOp = await this.signUserOperation({ userOpHash, userOp });\n        return this.sendSignedUserOperation(signedUserOp);\n    }\n\n    async sendSignedUserOperation(userOp: UserOp, signerParams?: SessionKeySignerParams): Promise<string> {\n        const accountConfig = await this.getAccountConfig();\n        return this.sendRpc<string>({\n            method: 'particle_aa_sendUserOp',\n            params: [accountConfig, userOp, signerParams],\n        });\n    }\n\n    async sendTransaction(params: SendTransactionParams): Promise<string> {\n        if (\n            Object.prototype.hasOwnProperty.call(params, 'userOpHash') &&\n            Object.prototype.hasOwnProperty.call(params, 'userOp')\n        ) {\n            const { userOpHash, userOp } = params as UserOpBundle;\n            if (userOpHash && userOp) {\n                return this.sendUserOperation({ userOpHash, userOp });\n            }\n        }\n\n        const { tx, feeQuote, tokenPaymasterAddress } = params as UserOpParams;\n        const userOpBundle = await this.buildUserOperation({ tx, feeQuote, tokenPaymasterAddress });\n        return this.sendUserOperation(userOpBundle);\n    }\n\n    async getAccount(): Promise<Account> {\n        const accountConfig = await this.getAccountConfig();\n        const accounts = await this.sendRpc<Account[]>({\n            method: 'particle_aa_getSmartAccount',\n            params: [accountConfig],\n        });\n        return accounts[0];\n    }\n\n    async getAddress(): Promise<string> {\n        let suffix = await this.getOwner();\n        if (!suffix) {\n            return '';\n        }\n\n        if (this.provider.isPasskey && suffix === '0x0000000000000000000000000000000000000000') {\n            // passkey\n            const credentialId = (await this.provider.getPasskeyOption?.())?.credentialId;\n            if (credentialId) {\n                suffix = credentialId;\n            }\n        }\n\n        const accountConfig = await this.getAccountConfig();\n        const localKey = `particle_${accountConfig.name}_${accountConfig.version}_${suffix}`;\n        if (typeof window !== 'undefined' && localStorage) {\n            const localAA = localStorage.getItem(localKey);\n            if (localAA) {\n                return localAA;\n            }\n        }\n\n        const configKey = JSON.stringify(accountConfig);\n        let accountPromise = loadAccountPromise.get(configKey);\n        if (!accountPromise) {\n            accountPromise = this.getAccount();\n            loadAccountPromise.set(configKey, accountPromise);\n        }\n\n        try {\n            const account = await accountPromise;\n            const address = account.smartAccountAddress;\n            if (typeof window !== 'undefined' && localStorage) {\n                localStorage.setItem(localKey, address);\n            }\n            return address;\n        } catch (error) {\n            loadAccountPromise.delete(configKey);\n            throw error;\n        }\n    }\n\n    async isDeployed(): Promise<boolean> {\n        const account = await this.getAccount();\n        return account.isDeployed;\n    }\n\n    async deployWalletContract(): Promise<string> {\n        return this.sendTransaction({\n            tx: {\n                to: '0x0000000000000000000000000000000000000000',\n                data: '0x',\n            },\n        });\n    }\n\n    async sendRpc<T>(arg: RequestArguments): Promise<T> {\n        const chainId = Number(await this.getChainId());\n        const accountContract = this.config.aaOptions.accountContracts[this.smartAccountContract.name];\n        const contractConfig = accountContract.find(\n            (contract) => contract.version === this.smartAccountContract.version\n        );\n        if (contractConfig?.chainIds?.length) {\n            if (!contractConfig.chainIds.includes(chainId)) {\n                throw new Error(`Invalid Chain: ${chainId}`);\n            }\n        }\n        const response = await this.connection\n            .post(\n                '',\n                {\n                    ...arg,\n                    id: payloadId(),\n                    jsonrpc: '2.0',\n                },\n                {\n                    params: {\n                        chainId,\n                        projectUuid: this.config.projectId,\n                        projectKey: this.config.clientKey,\n                    },\n                }\n            )\n            .then((res) => res.data);\n        if (response.error) {\n            return Promise.reject(response.error);\n        } else {\n            return response.result;\n        }\n    }\n\n    async createSessions(options: CreateSessionKeyOptions[]): Promise<FeeQuotesResponse> {\n        const accountConfig = await this.getAccountConfig();\n        return await this.sendRpc<FeeQuotesResponse>({\n            method: 'particle_aa_createSessions',\n            params: [accountConfig, options],\n        });\n    }\n\n    async validateSession(targetSession: SessionKey, sessions: SessionKey[]): Promise<boolean> {\n        const accountConfig = await this.getAccountConfig();\n        return await this.sendRpc<boolean>({\n            method: 'particle_aa_validateSession',\n            params: [\n                accountConfig,\n                {\n                    sessions,\n                    targetSession: targetSession,\n                },\n            ],\n        });\n    }\n}\n", "export const rpcUrl = (): string => {\n    const productionApi = 'https://rpc.particle.network';\n    const developmentApi = 'https://rpc-debug.particle.network';\n    //@ts-ignore\n    const dev = typeof window !== 'undefined' && window.__PARTICLE_ENVIRONMENT__ === 'development';\n    return dev ? developmentApi : productionApi;\n};\n\nexport function payloadId(): number {\n    const date = Date.now() * Math.pow(10, 3);\n    const extra = Math.floor(Math.random() * Math.pow(10, 3));\n    return date + extra;\n}\n"],
  "mappings": "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",
  "names": ["SendTransactionMode", "SendTransactionEvent", "EventEmitter", "axios", "config", "_a", "_b"]
}
