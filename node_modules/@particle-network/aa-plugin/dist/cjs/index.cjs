"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  aa: () => aa,
  version: () => version
});
module.exports = __toCommonJS(src_exports);
__reExport(src_exports, require("@particle-network/aa"), module.exports);

// src/aa.ts
var import_aa = require("@particle-network/aa");
var import_connector_core = require("@particle-network/connector-core");
var import_plugin_core = require("@particle-network/plugin-core");
var previousSmartAccount = null;
var aa = (paramers) => {
  if (!paramers || !paramers.name || !paramers.version) {
    throw new Error("AA Plugin paramers error.");
  }
  const { name, version: version2 } = paramers;
  return (0, import_plugin_core.createPlugin)((config) => ({
    get id() {
      return "aa";
    },
    get name() {
      return "Account Abstraction";
    },
    get erc4337() {
      return { name, version: version2 };
    },
    get smartAccount() {
      return previousSmartAccount;
    },
    getPlugin() {
      return previousSmartAccount;
    },
    async onConnect(connection) {
      const connector = connection[0].connector;
      if (connector.chainType === "evm") {
        const provider = await connector.getProvider();
        if ((previousSmartAccount == null ? void 0 : previousSmartAccount.provider) === provider) {
          return;
        }
        const { projectConfig, chains } = config;
        const accountContracts = {};
        accountContracts[name] = [
          {
            version: version2,
            chainIds: chains.filter(import_connector_core.isEVMChain).map((chain) => chain.id)
          }
        ];
        const smartAccount = new import_aa.SmartAccount(provider, {
          ...projectConfig,
          aaOptions: { accountContracts }
        });
        previousSmartAccount = smartAccount;
      } else {
        previousSmartAccount = null;
      }
    },
    async onDisconnect() {
      previousSmartAccount = null;
    }
  }));
};

// src/version.ts
var version = "1.0.3";
//# sourceMappingURL=index.cjs.map
