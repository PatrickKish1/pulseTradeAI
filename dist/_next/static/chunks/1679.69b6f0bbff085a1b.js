(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1679],{18796:function(){},21679:function(e,t,r){"use strict";r.r(t),r.d(t,{fromCognitoIdentity:function(){return s},fromCognitoIdentityPool:function(){return u},fromHttp:function(){return b},fromTemporaryCredentials:function(){return C},fromWebToken:function(){return S}});var o=r(62346);function n(e){return Promise.all(Object.keys(e).reduce((t,r)=>{let o=e[r];return"string"==typeof o?t.push([r,o]):t.push(o().then(e=>[r,e])),t},[])).then(e=>e.reduce((e,[t,r])=>(e[t]=r,e),{}))}function i(e){return async t=>{e.logger?.debug("@aws-sdk/credential-provider-cognito-identity - fromCognitoIdentity");let{GetCredentialsForIdentityCommand:i,CognitoIdentityClient:s}=await Promise.all([r.e(4190),r.e(6946),r.e(2129)]).then(r.bind(r,82129)),a=r=>e.clientConfig?.[r]??e.parentClientConfig?.[r]??t?.callerClientConfig?.[r],{Credentials:{AccessKeyId:c=function(e){throw new o.mV("Response from Amazon Cognito contained no access key ID",{logger:e})}(e.logger),Expiration:l,SecretKey:d=function(e){throw new o.mV("Response from Amazon Cognito contained no secret key",{logger:e})}(e.logger),SessionToken:u}=function(e){throw new o.mV("Response from Amazon Cognito contained no credentials",{logger:e})}(e.logger)}=await (e.client??new s(Object.assign({},e.clientConfig??{},{region:a("region"),profile:a("profile")}))).send(new i({CustomRoleArn:e.customRoleArn,IdentityId:e.identityId,Logins:e.logins?await n(e.logins):void 0}));return{identityId:e.identityId,accessKeyId:c,secretAccessKey:d,sessionToken:u,expiration:l}}}let s=e=>i({...e}),a="IdentityIds";class c{constructor(e="aws:cognito-identity-ids"){this.dbName=e}getItem(e){return this.withObjectStore("readonly",t=>{let r=t.get(e);return new Promise(e=>{r.onerror=()=>e(null),r.onsuccess=()=>e(r.result?r.result.value:null)})}).catch(()=>null)}removeItem(e){return this.withObjectStore("readwrite",t=>{let r=t.delete(e);return new Promise((e,t)=>{r.onerror=()=>t(r.error),r.onsuccess=()=>e()})})}setItem(e,t){return this.withObjectStore("readwrite",r=>{let o=r.put({id:e,value:t});return new Promise((e,t)=>{o.onerror=()=>t(o.error),o.onsuccess=()=>e()})})}getDb(){let e=self.indexedDB.open(this.dbName,1);return new Promise((t,r)=>{e.onsuccess=()=>{t(e.result)},e.onerror=()=>{r(e.error)},e.onblocked=()=>{r(Error("Unable to access DB"))},e.onupgradeneeded=()=>{let t=e.result;t.onerror=()=>{r(Error("Failed to create object store"))},t.createObjectStore(a,{keyPath:"id"})}})}withObjectStore(e,t){return this.getDb().then(r=>{let o=r.transaction(a,e);return o.oncomplete=()=>r.close(),new Promise((e,r)=>{o.onerror=()=>r(o.error),e(t(o.objectStore(a)))}).catch(e=>{throw r.close(),e})})}}class l{constructor(e={}){this.store=e}getItem(e){return e in this.store?this.store[e]:null}removeItem(e){delete this.store[e]}setItem(e,t){this.store[e]=t}}let d=new l,u=e=>(function({accountId:e,cache:t="object"==typeof self&&self.indexedDB?new c:"object"==typeof window&&window.localStorage?window.localStorage:d,client:s,clientConfig:a,customRoleArn:l,identityPoolId:u,logins:g,userIdentifier:m=g&&0!==Object.keys(g).length?void 0:"ANONYMOUS",logger:w,parentClientConfig:f}){w?.debug("@aws-sdk/credential-provider-cognito-identity - fromCognitoIdentity");let h=m?`aws:cognito-identity-credentials:${u}:${m}`:void 0,p=async c=>{let{GetIdCommand:d,CognitoIdentityClient:m}=await Promise.all([r.e(4190),r.e(6946),r.e(2129)]).then(r.bind(r,82129)),y=e=>a?.[e]??f?.[e]??c?.callerClientConfig?.[e],b=s??new m(Object.assign({},a??{},{region:y("region"),profile:y("profile")})),C=h&&await t.getItem(h);if(!C){let{IdentityId:r=function(e){throw new o.mV("Response from Amazon Cognito contained no identity ID",{logger:e})}(w)}=await b.send(new d({AccountId:e,IdentityPoolId:u,Logins:g?await n(g):void 0}));C=r,h&&Promise.resolve(t.setItem(h,C)).catch(()=>{})}return(p=i({client:b,customRoleArn:l,logins:g,identityId:C}))(c)};return e=>p(e).catch(async e=>{throw h&&Promise.resolve(t.removeItem(h)).catch(()=>{}),e})})({...e});var g=r(65645);let m=(e,t)=>{if("https:"!==e.protocol&&"169.254.170.2"!==e.hostname&&"169.254.170.23"!==e.hostname&&"[fd00:ec2::23]"!==e.hostname){if(e.hostname.includes("[")){if("[::1]"===e.hostname||"[0000:0000:0000:0000:0000:0000:0000:0001]"===e.hostname)return}else{if("localhost"===e.hostname)return;let t=e.hostname.split("."),r=e=>{let t=parseInt(e,10);return 0<=t&&t<=255};if("127"===t[0]&&r(t[1])&&r(t[2])&&r(t[3])&&4===t.length)return}throw new o.mV(`URL not accepted. It must either be HTTPS or match one of the following:
  - loopback CIDR 127.0.0.0/8 or [::1/128]
  - ECS container host 169.254.170.2
  - EKS container host 169.254.170.23 or [fd00:ec2::23]`,{logger:t})}};var w=r(96108),f=r(47834),h=r(86875);async function p(e,t){let r=(0,h.Ou)(e.body),n=await r.transformToString();if(200===e.statusCode){let e=JSON.parse(n);if("string"!=typeof e.AccessKeyId||"string"!=typeof e.SecretAccessKey||"string"!=typeof e.Token||"string"!=typeof e.Expiration)throw new o.mV("HTTP credential provider response not of the required format, an object matching: { AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }",{logger:t});return{accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,sessionToken:e.Token,expiration:(0,f.uj)(e.Expiration)}}if(e.statusCode>=400&&e.statusCode<500){let r={};try{r=JSON.parse(n)}catch(e){}throw Object.assign(new o.mV(`Server responded with status: ${e.statusCode}`,{logger:t}),{Code:r.Code,Message:r.Message})}throw new o.mV(`Server responded with status: ${e.statusCode}`,{logger:t})}let y=(e,t,r)=>async()=>{for(let o=0;o<t;++o)try{return await e()}catch(e){await new Promise(e=>setTimeout(e,r))}return await e()},b=(e={})=>{let t;e.logger?.debug("@aws-sdk/credential-provider-http - fromHttp");let r=e.credentialsFullUri;if(r)t=r;else throw new o.mV("No HTTP credential provider host provided.",{logger:e.logger});let n=new URL(t);m(n,e.logger);let i=new g.BX;return y(async()=>{let t=new w.aW({protocol:n.protocol,hostname:n.hostname,port:Number(n.port),path:n.pathname,query:Array.from(n.searchParams.entries()).reduce((e,[t,r])=>(e[t]=r,e),{}),fragment:n.hash});return e.authorizationToken&&(t.headers.Authorization=e.authorizationToken),p((await i.handle(t)).response)},e.maxRetries??3,e.timeout??1e3)},C=e=>{let t;return async()=>{e.logger?.debug("@aws-sdk/credential-providers - fromTemporaryCredentials (STS)");let n={...e.params,RoleSessionName:e.params.RoleSessionName??"aws-sdk-js-"+Date.now()};if(n?.SerialNumber){if(!e.mfaCodeProvider)throw new o.mV("Temporary credential requires multi-factor authentication, but no MFA code callback was provided.",{tryNextLink:!1,logger:e.logger});n.TokenCode=await e.mfaCodeProvider(n?.SerialNumber)}let{AssumeRoleCommand:i,STSClient:s}=await Promise.all([r.e(4190),r.e(3129),r.e(7773)]).then(r.bind(r,57773));if(t||(t=new s({...e.clientConfig,credentials:e.masterCredentials})),e.clientPlugins)for(let r of e.clientPlugins)t.middlewareStack.use(r);let{Credentials:a}=await t.send(new i(n));if(!a||!a.AccessKeyId||!a.SecretAccessKey)throw new o.mV(`Invalid response from STS.assumeRole call with role ${n.RoleArn}`,{logger:e.logger});return{accessKeyId:a.AccessKeyId,secretAccessKey:a.SecretAccessKey,sessionToken:a.SessionToken,expiration:a.Expiration,credentialScope:a.CredentialScope}}};r(18796);let I=e=>async t=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");let{roleArn:o,roleSessionName:n,webIdentityToken:i,providerId:s,policyArns:a,policy:c,durationSeconds:l}=e,{roleAssumerWithWebIdentity:d}=e;if(!d){let{getDefaultRoleAssumerWithWebIdentity:o}=await Promise.all([r.e(4190),r.e(3129),r.e(6941)]).then(r.bind(r,6941));d=o({...e.clientConfig,credentialProviderLogger:e.logger,parentClientConfig:{...t?.callerClientConfig,...e.parentClientConfig}},e.clientPlugins)}return d({RoleArn:o,RoleSessionName:n??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:i,ProviderId:s,PolicyArns:a,Policy:c,DurationSeconds:l})},S=e=>I({...e})}}]);