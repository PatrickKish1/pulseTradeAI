{
  "version": 3,
  "sources": ["../../src/pages/account/loginAccountBindLoading/index.tsx"],
  "sourcesContent": ["import { bindLoginAccount } from '@particle-network/auth-core';\nimport { useDebounceEffect } from 'ahooks';\nimport { Button } from 'antd';\nimport React, { useMemo, useState } from 'react';\nimport loadingImg from '../../../common/images/loading2.png';\nimport Header from '../../../components/header';\nimport { useCustomNavigate, useParticleAuth, useTranslation } from '../../../context';\nimport { useUserInfo } from '../../../context/hooks';\nimport useMessage from '../../../context/hooks/useMessage';\nimport { getLoginLogos } from '../../../utils';\nimport { getAccountList } from '../../loginAccount';\nimport styles from './index.less';\n\nconst LoginAccountBindLoading = (props: any) => {\n  const state = props;\n  const { authType = 'google', verifyToken, code } = state;\n  const navigate = useCustomNavigate();\n  const { modalOptions } = useParticleAuth();\n  const { t } = useTranslation();\n  const [loading, setLoading] = useState(true);\n  const { userInfo } = useUserInfo();\n  const message = useMessage();\n  const accountList = useMemo(() => {\n    return getAccountList({ userInfo, t });\n  }, [userInfo, t]);\n\n  const authItem = useMemo(() => {\n    const item = (accountList.find((item) => item.type.replace(/v1$/, '') == authType) || {}) as any;\n    return {\n      ...item,\n    };\n  }, [accountList, state]);\n\n  useDebounceEffect(\n    () => {\n      if (authType && verifyToken) {\n        bindLoginAccount({\n          provider: authType,\n          // eslint-disable-next-line camelcase\n          thirdparty_code: code,\n          // eslint-disable-next-line camelcase\n          security_account_verify_token: verifyToken,\n          version: 'v2',\n        })\n          .then((res) => {\n            setLoading(false);\n          })\n          .catch((error) => {\n            let msg = error.message;\n            if (error?.error_code === 20109) {\n              const tKey = `error.server_${authType}_20109`;\n              const details = t(tKey);\n              if (details && details != tKey) {\n                msg = details;\n              }\n            }\n            message.error(msg);\n            setTimeout(() => {\n              navigate('/account/security', { replace: true });\n            });\n          });\n      }\n    },\n    [authType, verifyToken],\n    {\n      wait: 50,\n    }\n  );\n\n  return (\n    <div className='account-bind-container'>\n      <style>{styles as unknown as string}</style>\n      <Header displayBackBtn={true}></Header>\n      <div className='particle-connect-form-contaier center-center flex-column'>\n        {loading ? (\n          <div className='particle-loading'>\n            <div className='loading-wrap'>\n              <img\n                src={getLoginLogos(modalOptions.themeType)[authType] || ''}\n                className='logo-img logo-img-2'\n                alt='logo'\n              />\n              <p>\n                <img className='particle-loading-img' src={loadingImg} alt='' />\n              </p>\n            </div>\n          </div>\n        ) : (\n          <div className='result-content resultsuccess'>\n            <img src={authItem?.icon} alt='' />\n            <div className='info'>Binding succeeded\uFF01</div>\n            <div className='back'>\n              <Button\n                type='primary'\n                onClick={() => {\n                  navigate('/account/security', { replace: true });\n                }}\n              >\n                Back\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default LoginAccountBindLoading;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,wBAAwB;AACjC,SAAS,yBAAyB;AAClC,SAAS,cAAc;AACvB,OAAO,SAAS,SAAS,gBAAgB;;;;;;AAUzC,IAAM,0BAA0B,CAAC,UAAe;AAC9C,QAAM,QAAQ;AACd,QAAM,EAAE,WAAW,UAAU,aAAa,KAAK,IAAI;AACnD,QAAM,WAAW,kBAAkB;AACnC,QAAM,EAAE,aAAa,IAAI,gBAAgB;AACzC,QAAM,EAAE,EAAE,IAAI,eAAe;AAC7B,QAAM,CAAC,SAAS,UAAU,IAAI,SAAS,IAAI;AAC3C,QAAM,EAAE,SAAS,IAAI,YAAY;AACjC,QAAM,UAAU,mBAAW;AAC3B,QAAM,cAAc,QAAQ,MAAM;AAChC,WAAO,eAAe,EAAE,UAAU,EAAE,CAAC;AAAA,EACvC,GAAG,CAAC,UAAU,CAAC,CAAC;AAEhB,QAAM,WAAW,QAAQ,MAAM;AAC7B,UAAM,OAAQ,YAAY,KAAK,CAACA,UAASA,MAAK,KAAK,QAAQ,OAAO,EAAE,KAAK,QAAQ,KAAK,CAAC;AACvF,WAAO;AAAA,MACL,GAAG;AAAA,IACL;AAAA,EACF,GAAG,CAAC,aAAa,KAAK,CAAC;AAEvB;AAAA,IACE,MAAM;AACJ,UAAI,YAAY,aAAa;AAC3B,yBAAiB;AAAA,UACf,UAAU;AAAA,UAEV,iBAAiB;AAAA,UAEjB,+BAA+B;AAAA,UAC/B,SAAS;AAAA,QACX,CAAC,EACE,KAAK,CAAC,QAAQ;AACb,qBAAW,KAAK;AAAA,QAClB,CAAC,EACA,MAAM,CAAC,UAAU;AAChB,cAAI,MAAM,MAAM;AAChB,eAAI,+BAAO,gBAAe,OAAO;AAC/B,kBAAM,OAAO,gBAAgB;AAC7B,kBAAM,UAAU,EAAE,IAAI;AACtB,gBAAI,WAAW,WAAW,MAAM;AAC9B,oBAAM;AAAA,YACR;AAAA,UACF;AACA,kBAAQ,MAAM,GAAG;AACjB,qBAAW,MAAM;AACf,qBAAS,qBAAqB,EAAE,SAAS,KAAK,CAAC;AAAA,UACjD,CAAC;AAAA,QACH,CAAC;AAAA,MACL;AAAA,IACF;AAAA,IACA,CAAC,UAAU,WAAW;AAAA,IACtB;AAAA,MACE,MAAM;AAAA,IACR;AAAA,EACF;AAEA,SACE,oCAAC,SAAI,WAAU,4BACb,oCAAC,eAAO,+BAA4B,GACpC,oCAAC,kBAAO,gBAAgB,MAAM,GAC9B,oCAAC,SAAI,WAAU,8DACZ,UACC,oCAAC,SAAI,WAAU,sBACb,oCAAC,SAAI,WAAU,kBACb;AAAA,IAAC;AAAA;AAAA,MACC,KAAK,cAAc,aAAa,SAAS,EAAE,aAAa;AAAA,MACxD,WAAU;AAAA,MACV,KAAI;AAAA;AAAA,EACN,GACA,oCAAC,WACC,oCAAC,SAAI,WAAU,wBAAuB,KAAK,kBAAY,KAAI,IAAG,CAChE,CACF,CACF,IAEA,oCAAC,SAAI,WAAU,kCACb,oCAAC,SAAI,KAAK,qCAAU,MAAM,KAAI,IAAG,GACjC,oCAAC,SAAI,WAAU,UAAO,yBAAkB,GACxC,oCAAC,SAAI,WAAU,UACb;AAAA,IAAC;AAAA;AAAA,MACC,MAAK;AAAA,MACL,SAAS,MAAM;AACb,iBAAS,qBAAqB,EAAE,SAAS,KAAK,CAAC;AAAA,MACjD;AAAA;AAAA,IACD;AAAA,EAED,CACF,CACF,CAEJ,CACF;AAEJ;AAEA,IAAOC,mCAAQ;",
  "names": ["item", "loginAccountBindLoading_default"]
}
