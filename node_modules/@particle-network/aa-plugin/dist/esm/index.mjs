// src/index.ts
export * from "@particle-network/aa";

// src/aa.ts
import {
  SmartAccount
} from "@particle-network/aa";
import { isEVMChain } from "@particle-network/connector-core";
import { createPlugin } from "@particle-network/plugin-core";
var previousSmartAccount = null;
var aa = (paramers) => {
  if (!paramers || !paramers.name || !paramers.version) {
    throw new Error("AA Plugin paramers error.");
  }
  const { name, version: version2 } = paramers;
  return createPlugin((config) => ({
    get id() {
      return "aa";
    },
    get name() {
      return "Account Abstraction";
    },
    get erc4337() {
      return { name, version: version2 };
    },
    get smartAccount() {
      return previousSmartAccount;
    },
    getPlugin() {
      return previousSmartAccount;
    },
    async onConnect(connection) {
      const connector = connection[0].connector;
      if (connector.chainType === "evm") {
        const provider = await connector.getProvider();
        if ((previousSmartAccount == null ? void 0 : previousSmartAccount.provider) === provider) {
          return;
        }
        const { projectConfig, chains } = config;
        const accountContracts = {};
        accountContracts[name] = [
          {
            version: version2,
            chainIds: chains.filter(isEVMChain).map((chain) => chain.id)
          }
        ];
        const smartAccount = new SmartAccount(provider, {
          ...projectConfig,
          aaOptions: { accountContracts }
        });
        previousSmartAccount = smartAccount;
      } else {
        previousSmartAccount = null;
      }
    },
    async onDisconnect() {
      previousSmartAccount = null;
    }
  }));
};

// src/version.ts
var version = "1.0.3";
export {
  aa,
  version
};
//# sourceMappingURL=index.mjs.map
