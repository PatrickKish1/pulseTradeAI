var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// src/chains/defineSolana.ts
var defineSolana_exports = {};
__export(defineSolana_exports, {
  solana: () => solana,
  solanaDevnet: () => solanaDevnet,
  solanaTestnet: () => solanaTestnet
});
import { defineChain } from "viem";
var solana = defineChain({
  id: 101,
  name: "Solana",
  nativeCurrency: {
    decimals: 9,
    name: "Solana SOL",
    symbol: "SOL"
  },
  rpcUrls: {
    default: {
      http: ["https://api.mainnet-beta.solana.com"]
    }
  },
  blockExplorers: {
    default: { name: "Explorer", url: "https://solscan.io" }
  },
  custom: {
    chainType: "solana"
  }
});
var solanaTestnet = defineChain({
  id: 102,
  name: "Solana Testnet",
  nativeCurrency: {
    decimals: 9,
    name: "Testnet SOL",
    symbol: "SOL"
  },
  rpcUrls: {
    default: {
      http: ["https://api.testnet.solana.com"]
    }
  },
  blockExplorers: {
    default: { name: "Explorer", url: "https://solscan.io" }
  },
  testnet: true,
  custom: {
    chainType: "solana"
  }
});
var solanaDevnet = defineChain({
  id: 103,
  name: "Solana Devnet",
  nativeCurrency: {
    decimals: 9,
    name: "Devnet SOL",
    symbol: "SOL"
  },
  rpcUrls: {
    default: {
      http: ["https://api.devnet.solana.com"]
    }
  },
  blockExplorers: {
    default: { name: "Explorer", url: "https://solscan.io" }
  },
  testnet: true,
  custom: {
    chainType: "solana"
  }
});

// src/chains/utils.ts
import * as chains from "viem/chains";
var isSolanaChain = (chain) => {
  const id = typeof chain === "number" ? chain : chain.id;
  return id === 101 || id === 102 || id === 103;
};
var isEVMChain = (chain) => {
  return !isSolanaChain(chain);
};
var getChainType = (chain) => {
  return isEVMChain(chain) ? "evm" : "solana";
};
var getChain = (chainId) => {
  for (const chain of Object.values(defineSolana_exports)) {
    if ("id" in chain) {
      if (chain.id === chainId) {
        return chain;
      }
    }
  }
  for (const chain of Object.values(chains)) {
    if ("id" in chain) {
      if (chain.id === chainId) {
        return chain;
      }
    }
  }
  throw new Error(`Chain with id ${chainId} not found`);
};
var getChainIcon = (chain) => {
  if (typeof chain !== "number" && typeof chain.custom?.icon === "string") {
    return chain.custom?.icon;
  }
  const chainId = typeof chain === "number" ? chain : chain.id;
  if (isSolanaChain(chainId)) {
    return `https://static.particle.network/chains/solana/icons/${chainId}.png`;
  }
  return `https://static.particle.network/chains/evm/icons/${chainId}.png`;
};
var defaultChainIcon = "https://static.particle.network/chains/unknown-logo.png";

export {
  __publicField,
  solana,
  solanaTestnet,
  solanaDevnet,
  isSolanaChain,
  isEVMChain,
  getChainType,
  getChain,
  getChainIcon,
  defaultChainIcon
};
//# sourceMappingURL=chunk-NJRWNJ3W.mjs.map
